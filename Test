import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.sql.*;

public class DataProcessingProgram {
    public static void main(String[] args) {
        String baseOutputPath = "output";
        int batchSize = 1000;
        int maxFileSize = 100 * 1024 * 1024; // 100 MB

        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/mydatabase", "username", "password");
             PreparedStatement mainQuery = connection.prepareStatement("SELECT * FROM main_table");
             ResultSet resultSet = mainQuery.executeQuery()) {

            int fileIndex = 1;
            String outputFilePath = baseOutputPath + "_" + fileIndex + ".txt";

            try (BufferedWriter writer = createBufferedWriter(outputFilePath)) {
                StringBuilder stringBuilder = new StringBuilder();
                int recordCount = 0;
                long currentFileSize = 0;

                while (resultSet.next()) {
                    // Process the current record
                    // ...

                    // Example: Get the record ID
                    int recordId = resultSet.getInt("id");

                    // Generate the record data
                    String recordData = "Record ID: " + recordId + "\n";

                    // Append the record data to the string builder
                    stringBuilder.append(recordData);
                    recordCount++;

                    // Check if the batch size is reached or the file size limit is exceeded
                    if (recordCount % batchSize == 0 || currentFileSize + recordData.length() > maxFileSize) {
                        writeToFile(stringBuilder.toString(), writer);

                        // Reset the string builder and update file-related variables
                        stringBuilder.setLength(0);
                        recordCount = 0;
                        currentFileSize = getFileSize(outputFilePath);

                        // Create a new file if the current file size exceeds the limit
                        if (currentFileSize > maxFileSize) {
                            writer.close(); // Close the current file writer
                            fileIndex++;
                            outputFilePath = baseOutputPath + "_" + fileIndex + ".txt";
                            writer = createBufferedWriter(outputFilePath);
                        }
                    }
                }

                // Write any remaining records to the file
                if (stringBuilder.length() > 0) {
                    writeToFile(stringBuilder.toString(), writer);
                }
            }
        } catch (SQLException | IOException e) {
            e.printStackTrace();
        }
    }

    private static BufferedWriter createBufferedWriter(String filePath) throws IOException {
        FileOutputStream fileOutputStream = new FileOutputStream(filePath, true);
        OutputStreamWriter outputStreamWriter = new OutputStreamWriter(fileOutputStream, StandardCharsets.UTF_8);
        return new BufferedWriter(outputStreamWriter, 8192); // 8192 is the buffer size (can be adjusted for better performance)
    }

    private static void writeToFile(String data, BufferedWriter writer) throws IOException {
        writer.write(data);
    }

    private static long getFileSize(String filePath) {
        File file = new File(filePath);
        return file.length();
    }
}
