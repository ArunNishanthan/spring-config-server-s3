#!/bin/bash

# Ensure the script exits on any error
set -e

# Variables
IMAGE="alpine"
TAG="latest"
REGISTRY="https://registry.hub.docker.com"
OUTPUT_DIR="./docker_image"
MANIFEST_URL="${REGISTRY}/v2/library/${IMAGE}/manifests/${TAG}"

# Step 1: Fetch image manifest
echo "Fetching manifest for ${IMAGE}:${TAG}..."
MANIFEST=$(curl -sSL ${MANIFEST_URL})
CONFIG_DIGEST=$(echo $MANIFEST | jq -r '.config.digest')
LAYERS=$(echo $MANIFEST | jq -r '.layers[].digest')

# Step 2: Download image layers
mkdir -p ${OUTPUT_DIR}
cd ${OUTPUT_DIR}
echo "Downloading image layers..."

for LAYER in $LAYERS; do
  LAYER_FILE=$(echo $LAYER | sed 's/:/_/')
  curl -sSL "${REGISTRY}/v2/library/${IMAGE}/blobs/${LAYER}" -o "${LAYER_FILE}.tar"
  echo "${LAYER_FILE}.tar downloaded."
done

# Download config
CONFIG_FILE=$(echo $CONFIG_DIGEST | sed 's/:/_/')
curl -sSL "${REGISTRY}/v2/library/${IMAGE}/blobs/${CONFIG_DIGEST}" -o "${CONFIG_FILE}.json"

# Step 3: Create manifest.json
echo "Creating manifest.json..."
cat <<EOF > manifest.json
[
  {
    "Config": "${CONFIG_FILE}.json",
    "RepoTags": ["${IMAGE}:${TAG}"],
    "Layers": [
EOF

for LAYER in $LAYERS; do
  LAYER_FILE=$(echo $LAYER | sed 's/:/_/')
  echo "    \"${LAYER_FILE}.tar\"," >> manifest.json
done

# Remove the last comma and close JSON
sed -i '$ s/,$//' manifest.json
echo "  ]" >> manifest.json
echo "}" >> manifest.json
echo "]" >> manifest.json

# Step 4: Create repositories file
echo "Creating repositories..."
cat <<EOF > repositories
{
  "${IMAGE}": {
    "${TAG}": "$(echo $MANIFEST | jq -r '.config.digest')"
  }
}
EOF

# Step 5: Create final tarball
cd ..
TAR_FILE="${IMAGE}_${TAG}.tar"
tar -cf ${TAR_FILE} -C ${OUTPUT_DIR} .

# Step 6: Load image into Docker
echo "Loading image into Docker..."
docker load -i ${TAR_FILE}

# Clean up
rm -rf ${OUTPUT_DIR}
echo "Done! Image ${IMAGE}:${TAG} has been loaded into Docker."
