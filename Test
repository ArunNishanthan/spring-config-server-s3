<dependency>
    <groupId>io.opentelemetry</groupId>
    <artifactId>opentelemetry-exporter-otlp</artifactId>
    <version>1.32.0</version>
</dependency>
<dependency>
    <groupId>io.opentelemetry.instrumentation</groupId>
    <artifactId>opentelemetry-spring-boot-starter</artifactId>
    <version>1.32.0-alpha</version>
</dependency>


management:
  tracing:
    enabled: true
  otlp:
    endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT:http://localhost:8200}
  logs:
    enabled: true

otel:
  service:
    name: ${OTEL_SERVICE_NAME:my-spring-app}
  exporter:
    otlp:
      protocol: grpc
      endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT:http://localhost:8200}
      headers:
        Authorization: "Bearer ${ELASTIC_APM_SECRET_TOKEN:}"
  resource:
    attributes: "global_label=my-app,environment=${ENVIRONMENT:production}"


import io.opentelemetry.api.GlobalOpenTelemetry;
import io.opentelemetry.api.common.AttributeKey;
import io.opentelemetry.sdk.OpenTelemetrySdk;
import io.opentelemetry.sdk.resources.Resource;
import io.opentelemetry.sdk.trace.SdkTracerProvider;
import org.springframework.stereotype.Service;

@Service
public class TracingService {
    private boolean tracingEnabled = false;
    private OpenTelemetrySdk openTelemetry;

    public void enableTracing() {
        if (!tracingEnabled) {
            Resource resource = Resource.getDefault().toBuilder()
                    .put(AttributeKey.stringKey("global_label"), System.getenv().getOrDefault("GLOBAL_LABEL", "my-app"))
                    .put(AttributeKey.stringKey("environment"), System.getenv().getOrDefault("ENVIRONMENT", "production"))
                    .build();

            openTelemetry = OpenTelemetrySdk.builder()
                    .setTracerProvider(SdkTracerProvider.builder().setResource(resource).build())
                    .build();

            GlobalOpenTelemetry.set(openTelemetry);
            tracingEnabled = true;
        }
    }

    public void disableTracing() {
        if (tracingEnabled) {
            openTelemetry.close();
            tracingEnabled = false;
        }
    }

    public boolean isTracingEnabled() {
        return tracingEnabled;
    }
}
